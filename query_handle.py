from db_connection import get_connection

def fetch_order_info(chave_nfe):
    query = """ -- Insira aqui seu SQL principal, adaptado para Python
DECLARE @CHAVE AS VARCHAR(44) = ?
          DECLARE @CNPJ AS VARCHAR(14) = SUBSTRING(@CHAVE, 7, 14)


;WITH CTE AS (
            SELECT 
                COALESCE(A.CODIGO_ESPELHO, B.CODIGO_ESPELHO, C.CODIGO_ESPELHO) AS PROTOCOLO,
                COALESCE(A.CHAVE_NFE, B.CHAVE_NFE, C.CHAVE_NFE) AS CHAVE_NFE,
                COALESCE(A.FACCAO, B.FACCAO, C.FACCAO, A.FORNECEDOR, B.FORNECEDOR) AS FORNECEDOR
            FROM PITAGORAS_BD.DBO.XML_PIT_NF_COMPRA A 
            FULL JOIN PITAGORAS_BD.DBO.XML_PIT_NF B ON B.CHAVE_NFE = A.CHAVE_NFE
            FULL JOIN PITAGORAS_BD.DBO.XML_PIT_NF_ORDEM_PRODUCAO C ON C.CHAVE_NFE = A.CHAVE_NFE 
            WHERE A.CHAVE_NFE = @CHAVE OR B.CHAVE_NFE = @CHAVE OR C.CHAVE_NFE = @CHAVE
        ),
        DOCA_PIT AS (
            SELECT A.*, ISNULL(B.DOCUMENTO, B.DOCUMENTO_AUX) AS DOCUMENTO, B.DATA_RECEBIMENTO, B.DATA_HORA_INICIO, C.DOCA 
            FROM CTE A
            JOIN PITAGORAS_BD.DBO.PROTOCOLO_AGENDAMENTO B ON B.CODIGO_ESPELHO = A.PROTOCOLO
            JOIN PITAGORAS_BD.DBO.CADASTRO_DOCAS C (NOLOCK) ON C.COD_DOCA = B.COD_DOCA
        ),
        AGENDAMENTO AS (
            SELECT 
                DENSE_RANK() OVER(PARTITION BY CHAVE_NFE ORDER BY DATA_HORA_INTEGRACAO DESC) AS DENSE,
                CHAVE_NFE,
                NUMERO_DOCUMENTO,
                DATA_AGENDAMENTO,
                HORA_AGENDAMENTO,
                CASE WHEN APP_ORIGEM = 'PITAGORAS' THEN 'PITAGORAS' ELSE 'SINTESE' END AS APP_ORIGEM,
                TIPO_ITEM,
				CODIGO_ITEM AS PRODUTO,
				COR_ITEM AS COR,
				(A_1 + A_2 + A_3 + A_4 + A_5 + A_6 + A_7 + A_8 + A_9 + A_10 +
				A_11 + A_12 + A_13 + A_14 + A_15 + A_16 + A_17 + A_18 + A_19 + A_20 +
				A_21 + A_22 + A_23 + A_24 + A_25 + A_26 + A_27 + A_28 + A_29 + A_30 +
				A_31 + A_32 + A_33 + A_34 + A_35 + A_36 + A_37 + A_38 + A_39 + A_40 +
				A_41 + A_42 + A_43 + A_44 + A_45 + A_46 + A_47 + A_48
				) as QTDE_AGENDADA
				FROM SS_WMS_PORTAL_AGENDAMENTO A
            WHERE CHAVE_NFE = @CHAVE
        ),
        AGENDAMENTO_FINAL AS (
            SELECT 
                CHAVE_NFE, 
                NUMERO_DOCUMENTO,
                MAX(DATA_AGENDAMENTO) AS DATA_AGENDAMENTO, 
                HORA_AGENDAMENTO, 
                APP_ORIGEM, 
                TIPO_ITEM,
				PRODUTO,
				COR,
				QTDE_AGENDADA
			FROM AGENDAMENTO 

            WHERE DENSE = 1 
            GROUP BY CHAVE_NFE, APP_ORIGEM, TIPO_ITEM, HORA_AGENDAMENTO, NUMERO_DOCUMENTO, PRODUTO, COR, QTDE_AGENDADA
			--NF_SEGUNDA_QUALIDADE, PECA_PILOTO_OBRIGATORIA
        ),
		AGENDAMENTO_COM_IMPORTACAO AS (
		
		SELECT DISTINCT
            ISNULL(A.CHAVE_NFE, C.CHAVE_NFE) AS CHAVE_NFE,
            CASE
				WHEN EST1.ROMANEIO_PRODUTO IS NOT NULL THEN EST2.PEDIDO
				ELSE ISNULL(A.NUMERO_DOCUMENTO, C.DOCUMENTO) 
			END AS NUMERO_DOCUMENTO,
            ISNULL(B.NF_ENTREGA, SUBSTRING(COALESCE(A.CHAVE_NFE, C.CHAVE_NFE), 26, 9)) AS NOTA_FISCAL,
            COALESCE(b.FORNECEDOR, C.FORNECEDOR, E.NOME_CLIFOR) AS FORNECEDOR,
            ISNULL(CAST(MAX(C.DATA_HORA_INICIO) AS date), MAX(A.DATA_AGENDAMENTO)) AS DATA_AGENDAMENTO, -- LINHA CORRIGIDA
            ISNULL(LEFT(CAST(C.DATA_HORA_INICIO AS time), 5), A.HORA_AGENDAMENTO) AS HORA_AGENDAMENTO,
            CASE WHEN A.APP_ORIGEM = 'PITAGORAS' THEN 'PITAGORAS'
                 WHEN C.CHAVE_NFE IS NOT NULL THEN 'PITAGORAS'
                 WHEN A.APP_ORIGEM = 'SINTESE' AND A.CHAVE_NFE IS NOT NULL THEN 'SINTESE' END AS PORTAL,
            CASE WHEN A.APP_ORIGEM = 'PITAGORAS' THEN C.DOCA
                 WHEN C.DOCA IS NOT NULL THEN C.DOCA ELSE B.CD END AS CD,
            CASE WHEN A.TIPO_ITEM = 'MP' THEN 'MATÉRIA PRIMA'
                 WHEN A.TIPO_ITEM = 'PA' THEN 'PRODUTO ACABADO' END AS TIPO_ITEM,
           B.TIPO_ENTREGA AS TIPO_ENTREGA,
            --CASE WHEN A.NF_SEGUNDA_QUALIDADE = 1 THEN 'SIM'
            --     WHEN A.NF_SEGUNDA_QUALIDADE = 0 THEN 'NÃO'
            --     WHEN ISNULL(A.CHAVE_NFE, C.CHAVE_NFE) IS NOT NULL THEN 'NÃO' END AS 'NF SEGUNDA QUALIDADE',
            --B.ENTREGA_PECA_PILOTO,
            MAX(B.COLECAO) AS COLECAO,
			--TF.DIA_ENTRADA_LOJA,
			--CASE 
			--	WHEN DAY(TF.DIA_ENTRADA_LOJA) BETWEEN 1 AND 7 THEN 1
			--	WHEN DAY(TF.DIA_ENTRADA_LOJA) BETWEEN 8 AND 15 THEN 2
			--	WHEN DAY(TF.DIA_ENTRADA_LOJA) BETWEEN 16 AND 23 THEN 3
			--	ELSE 4
			--END AS NUMERO_SEMANA
			A.PRODUTO,
			A.COR,
			LR.DESC_REDE_LOJAS AS MARCA,
			QTDE_AGENDADA

        FROM AGENDAMENTO_FINAL A

        LEFT JOIN SS_PORTAL_CSRF_RELATORIO B 
			ON B.CHAVE_NFE = A.CHAVE_NFE

        FULL JOIN DOCA_PIT C 
			ON C.CHAVE_NFE = A.CHAVE_NFE

        LEFT JOIN CADASTRO_CLI_FOR E 
			ON E.CGC_CPF = @CNPJ

		LEFT JOIN ESTOQUE_PROD1_ENT EST1
			ON EST1.PRODUTO = A.PRODUTO
			AND EST1.COR_PRODUTO = A.COR
			AND EST1.QTDE = A.QTDE_AGENDADA
			AND EST1.FILIAL = 'FABULA IMPORTADORA SC'

		LEFT JOIN ESTOQUE_PROD_ENT EST2
			ON EST2.ROMANEIO_PRODUTO = EST1.ROMANEIO_PRODUTO
			   AND EST2.FILIAL = EST1.FILIAL

		LEFT JOIN PRODUTOS P
			ON P.PRODUTO = A.PRODUTO 

		JOIN LOJAS_REDE LR
			ON LR.REDE_LOJAS = P.REDE_LOJAS



		  GROUP BY
            ISNULL(A.CHAVE_NFE, C.CHAVE_NFE),
            CASE
				WHEN EST1.ROMANEIO_PRODUTO IS NOT NULL THEN EST2.PEDIDO
				ELSE ISNULL(A.NUMERO_DOCUMENTO, C.DOCUMENTO) 
			END,
            ISNULL(B.NF_ENTREGA, SUBSTRING(COALESCE(A.CHAVE_NFE, C.CHAVE_NFE), 26, 9)),
            COALESCE(B.FORNECEDOR, C.FORNECEDOR, E.NOME_CLIFOR),
            ISNULL(LEFT(CAST(C.DATA_HORA_INICIO AS time), 5), A.HORA_AGENDAMENTO),
            CASE WHEN A.APP_ORIGEM = 'PITAGORAS' THEN 'PITAGORAS'
                 WHEN C.CHAVE_NFE IS NOT NULL THEN 'PITAGORAS'
                 WHEN A.APP_ORIGEM = 'SINTESE' AND A.CHAVE_NFE IS NOT NULL THEN 'SINTESE' END,
            CASE WHEN A.APP_ORIGEM = 'PITAGORAS' THEN C.DOCA
                 WHEN C.DOCA IS NOT NULL THEN C.DOCA ELSE B.CD END,
            CASE WHEN A.TIPO_ITEM = 'MP' THEN 'MATÉRIA PRIMA'
                 WHEN A.TIPO_ITEM = 'PA' THEN 'PRODUTO ACABADO' END,
            B.TIPO_ENTREGA,
			  --       	TF.DIA_ENTRADA_LOJA,
			--CASE 
			--	WHEN DAY(TF.DIA_ENTRADA_LOJA) BETWEEN 1 AND 7 THEN 1
			--	WHEN DAY(TF.DIA_ENTRADA_LOJA) BETWEEN 8 AND 15 THEN 2
			--	WHEN DAY(TF.DIA_ENTRADA_LOJA) BETWEEN 16 AND 23 THEN 3
			--	ELSE 4
			--END
			A.PRODUTO,
			A.COR,
			LR.DESC_REDE_LOJAS,
			QTDE_AGENDADA

	)
	SELECT

		A.NUMERO_DOCUMENTO
		,A.NOTA_FISCAL
		,A.FORNECEDOR
		,A.DATA_AGENDAMENTO
		,A.HORA_AGENDAMENTO
		,A.PORTAL
		,A.CD
		,A.TIPO_ITEM
		,CASE 
			WHEN A.TIPO_ENTREGA = 'IMPORTAÇÃO' THEN 
				CASE 
					WHEN FAT.FILIAL like '%VAREJO%' THEN 'VAREJO'
					WHEN FAT.FILIAL like '%ATAC%' THEN 'ATACADO'
					WHEN FAT.FILIAL = 'NV - RECEBIMENTO RJ' THEN 'VAREJO'
					WHEN FAT.FILIAL = 'CONTROLE QUALID FRANQUIA' THEN 'FRANQUIA' 
		ELSE A.TIPO_ENTREGA END END
				AS TIPO_ENTREGA
		,A.COLECAO
		,TF.DIA_ENTRADA_LOJA
		,CASE 
			WHEN DAY(TF.DIA_ENTRADA_LOJA) BETWEEN 1 AND 7 THEN 1
			WHEN DAY(TF.DIA_ENTRADA_LOJA) BETWEEN 8 AND 15 THEN 2
			WHEN DAY(TF.DIA_ENTRADA_LOJA) BETWEEN 16 AND 23 THEN 3
			ELSE 4
		END AS NUMERO_SEMANA,
		A.PRODUTO,
		A.COR,
		A.MARCA,
		QTDE_AGENDADA



	FROM AGENDAMENTO_COM_IMPORTACAO A

	LEFT JOIN LOJA_ENTRADAS FAT
		ON FAT.CHAVE_NFE = A.CHAVE_NFE

CROSS APPLY (
    -- O subselect agora busca o valor MÁXIMO (MAX) de todas as datas encontradas
    SELECT MAX(X.DIA_ENTRADA_LOJA) AS DIA_ENTRADA_LOJA
    FROM (
        -- Primeiro, selecionamos as datas da primeira tabela (TEMP_COD)
        -- baseando-se apenas em PRODUTO e COR
        SELECT TC.DIA_ENTRADA_LOJA
        FROM TEMP_COD AS TC
        WHERE TC.PRODUTO = A.PRODUTO
          AND TC.COR_PRODUTO = A.COR

        UNION ALL

        -- Depois, unimos com as datas da segunda tabela (TEMP_COD1)
        -- também baseando-se apenas em PRODUTO e COR
        SELECT TC1.DIA_ENTRADA_LOJA
        FROM TEMP_COD1 AS TC1
        WHERE TC1.PRODUTO = A.PRODUTO
          AND TC1.COR_PRODUTO = A.COR
    ) AS X

) AS TF -- (DIA_ENTRADA_LOJA) continua sendo o nome do campo resultante

    """
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute(query, (chave_nfe,))
        rows = cursor.fetchall()
        return rows